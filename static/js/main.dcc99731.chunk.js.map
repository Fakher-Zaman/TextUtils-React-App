{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","style","height","alert","className","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","href","title","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","color","heading","value","onChange","event","target","backgroundColor","rows","disabled","length","newText","showAlert","navigator","clipboard","writeText","split","join","filter","element","defaultProps","aboutText","App","setMode","setAlert","message","setTimeout","document","body","Date","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.dcc99731.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Alert(props) {\n    const capitalize = (word)=>{\n        const lower = word.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    }\n    return (\n        <div style={{height: '50px'}}>\n        {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n           <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg} \n        </div>}\n        </div>\n    )\n}\n\nexport default Alert\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nexport default function Navbar(props) {\n    return (\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n            <div className=\"container-fluid\">\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\n                        </li>\n                    </ul>\n\n                    <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\n                    </div>\n                </div>\n            </div>\n        </nav>\n    )\n}\n\nNavbar.propTypes = {\n    title: PropTypes.string.isRequired,\n    aboutText: PropTypes.string.isRequired\n}\n\nNavbar.defaultProps = {\n    title: 'Set title here',\n    aboutText: 'About'\n};","import React, {useState} from 'react'\n\n\nexport default function TextForm(props) {\n    const handleUpClick = ()=>{\n        let newText = text.toUpperCase();\n        setText(newText)\n        props.showAlert(\"Converted to uppercase!\", \"success\");\n    }\n\n    const handleLoClick = ()=>{ \n        let newText = text.toLowerCase();\n        setText(newText)\n        props.showAlert(\"Converted to lowercase!\", \"success\");\n    }\n\n    const handleClearClick = ()=>{ \n        let newText = '';\n        setText(newText);\n        props.showAlert(\"Text Cleared!\", \"success\");\n    }\n\n    const handleOnChange = (event)=>{\n        setText(event.target.value) \n    }\n\n    // Credits: A\n    const handleCopy = () => {\n        navigator.clipboard.writeText(text); \n        props.showAlert(\"Copied to Clipboard!\", \"success\");\n    }\n\n    // Credits: Coding Wala\n    const handleExtraSpaces = () => {\n        let newText = text.split(/[ ]+/);\n        setText(newText.join(\" \"));\n        props.showAlert(\"Extra spaces removed!\", \"success\");\n    }\n\n    const [text, setText] = useState(''); \n    // text = \"new text\"; // Wrong way to change the state\n    // setText(\"new text\"); // Correct way to change the state\n    return (\n        <>\n        <div className=\"container\" style={{color: props.mode==='dark'?'white':'#042743'}}> \n            <h1 className='mb-4'>{props.heading}</h1>\n            <div className=\"mb-3\"> \n            <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'#13466e':'white', color: props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"8\"></textarea>\n            </div>\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClick}>Convert to Uppercase</button>\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleLoClick}>Convert to Lowercase</button>\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleClearClick}>Clear Text</button>\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleCopy}>Copy Text</button>\n            <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\n        </div>\n        <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'#042743'}}>\n            <h2>Your text summary</h2>\n            <p>{text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} words and {text.length} characters</p>\n            <p>{0.008 *  text.split(\" \").filter((element)=>{return element.length!==0}).length} Minutes read</p>\n            <h2>Preview</h2>\n            <p>{text.length>0?text:\"Nothing to preview!\"}</p>\n        </div>\n        </>\n    )\n}\n","import './App.css';\nimport Alert from './components/Alert';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\n\nfunction App() {\n  const [mode, setMode] = useState('light'); // Whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n    }\n  }\n  return (\n    <>\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} key={new Date()} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        {/* /users --> Component 1\n        /users/home --> Component 2 */}\n        <TextForm showAlert={showAlert} heading=\"Try TextUtils - word counter, character counter, remove extra spaces\" mode={mode} />\n      </div>\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}